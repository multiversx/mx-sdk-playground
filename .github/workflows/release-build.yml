env:
  IMAGE_NAME: development-playground
  REGISTRY_HOSTNAME: multiversx

name: Build & push Docker image (Release)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Simulate release version (e.g., v0.4.2)'
        required: false
        default: ''
        type: string

jobs:
  build-docker-image:
    strategy:
      matrix:
        runner: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            ${{ github.event.inputs.version != '' && format('type=ref,event=pr,pattern={0}', github.event.inputs.version) || '' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image to Docker Hub
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./.devcontainer
          file: ./.devcontainer/Dockerfile
          push: true
          tags: ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_NAME }}-${{ matrix.runner }}-${{ github.run_id }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true

      - name: Export image reference
        if: steps.build.outputs.digest != ''
        run: |
          mkdir -p ${{ runner.temp }}/images
          image_ref="${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_NAME }}-${{ matrix.runner }}-${{ github.run_id }}@${{ steps.build.outputs.digest }}"
          echo "$image_ref" > ${{ runner.temp }}/images/ref.txt

      - name: Upload image reference
        if: steps.build.outputs.digest != ''
        uses: actions/upload-artifact@v4
        with:
          name: images-${{ matrix.runner }}
          path: ${{ runner.temp }}/images/ref.txt
          if-no-files-found: ignore
          retention-days: 1

  create-manifest:
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download image references
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/images
          pattern: images-*
          merge-multiple: true

      - name: Export metadata JSON
        run: |
          echo "DOCKER_METADATA_OUTPUT_JSON<<EOF" >> $GITHUB_ENV
          echo '${{ steps.meta.outputs.json }}' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create multi-platform manifest and push
        run: |
          image_refs=$(cat ${{ runner.temp }}/images/*.txt | tr '\n' ' ')
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $image_refs
